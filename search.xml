<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>使用Spark DataFrame实现基于物品的协同过滤算法(ItemCF)</title>
      <link href="/2018/04/10/spark-itemcf/"/>
      <url>/2018/04/10/spark-itemcf/</url>
      <content type="html"><![CDATA[<h1 id="使用Spark-DataFrame实现基于物品的协同过滤算法-ItemCF"><a href="#使用Spark-DataFrame实现基于物品的协同过滤算法-ItemCF" class="headerlink" title="使用Spark DataFrame实现基于物品的协同过滤算法(ItemCF)"></a>使用Spark DataFrame实现基于物品的协同过滤算法(ItemCF)</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>当前spark支持的协同过滤算法只有ALS(基于模型的协同过滤算法)，但ALS算法对于某些特定的问题，效果并不理想，不像mahout提供了各种推荐算法。为了享受到spark在速度上带来的提升同时为满足一些业务需求，遂使用spark构建ItemCF算法。同时spark提供了新的DataFrame数据类型，使算法开发更加清晰和易于实现，</p><h2 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h2><ul><li>本文需要你对基于物品的协同过滤算法（ItemCF）的基本计算过程有一定了解，若未了解过ItemCF，请参阅《<a href="https://www.zybuluo.com/xtccc/note/200979" target="_blank" rel="noopener">基于领域的协同过滤算法 ： UserCF and ItemCF</a>》。</li><li>本文使用spark的DataFrame数据类型进行开发，而非RDD。若不了解DataFrame，请参阅《<a href="https://spark.apache.org/docs/latest/sql-programming-guide.html" target="_blank" rel="noopener">Spark SQL, DataFrames and Datasets Guide</a>》。</li></ul><h2 id="常用相似度计算公式"><a href="#常用相似度计算公式" class="headerlink" title="常用相似度计算公式"></a>常用相似度计算公式</h2><p>协同过滤算法中最重要的部分是要计算物品间的相似度，对于不同的场景，可以应用不同的相似度计算公式来计算相似度，常用的相似度计算公式如下所示：</p><h3 id="同现相似度-Co-Occurrence"><a href="#同现相似度-Co-Occurrence" class="headerlink" title="同现相似度(Co Occurrence)"></a>同现相似度(Co Occurrence)</h3><h4 id="同现相似度公式"><a href="#同现相似度公式" class="headerlink" title="同现相似度公式"></a>同现相似度公式</h4><p>$$ w(x,y)=\frac{|N(x)\cap{N(y)}|}{|N(x)|} $$</p><p>公式中分母是喜欢物品x的用户数，而分子则是同时对物品x和物品y感兴趣的用户数。因此，上述公式可用理解为对物品x感兴趣的用户有多大概率也对y感兴趣  (和关联规则类似)</p><p>但上述的公式存在一个问题，如果物品y是热门物品，有很多人都喜欢，则会导致W(x, y)很大，接近于1。因此会造成任何物品都和热门物品交有很大的相似度。为此我们用如下公式进行修正:</p><h4 id="改进的同现相似度公式"><a href="#改进的同现相似度公式" class="headerlink" title="改进的同现相似度公式"></a>改进的同现相似度公式</h4><p>$$ w(x,y)=\frac{|N(x)\cap{N(y)}|}{\sqrt{|N(x)||N(y)|}} $$</p><p>这个格式惩罚了物品y的权重，因此减轻了热门物品和很多物品相似的可能性。(也归一化了)</p><h3 id="欧几里得相似度-Eucledian-Similarity"><a href="#欧几里得相似度-Eucledian-Similarity" class="headerlink" title="欧几里得相似度(Eucledian Similarity)"></a>欧几里得相似度(Eucledian Similarity)</h3><p>欧几里得相似度根据欧几里得距离计算而来，距离越近相似度越高，反之相反。</p><h4 id="欧几里得距离定义"><a href="#欧几里得距离定义" class="headerlink" title="欧几里得距离定义"></a>欧几里得距离定义</h4><blockquote><p>在数学中，欧几里得距离或欧几里得度量是欧几里得空间中两点间“普通”（即直线）距离。使用这个距离，欧氏空间成为度量空间。相关联的范数称为欧几里得范数。较早的文献称之为毕达哥拉斯度量。</p></blockquote><h4 id="欧几里得距离公式"><a href="#欧几里得距离公式" class="headerlink" title="欧几里得距离公式"></a>欧几里得距离公式</h4><p>$$ \ d_{X,Y}=\sqrt{ \sum_{i=1}^n(x_i-y_i)^2} $$</p><h3 id="皮尔逊相似度"><a href="#皮尔逊相似度" class="headerlink" title="皮尔逊相似度"></a>皮尔逊相似度</h3><p>皮尔逊相关系数，即概率论中的相关系数，取值范围[-1，+1]。当大于零时，两个变量正相关，当小于零时表示两个向量负相关。</p><h4 id="皮尔逊积矩相关系数定义"><a href="#皮尔逊积矩相关系数定义" class="headerlink" title="皮尔逊积矩相关系数定义"></a>皮尔逊积矩相关系数定义</h4><blockquote><p>两个变量之间的皮尔逊相关系数定义为两个变量之间的协方差和标准差的商：</p></blockquote><h4 id="皮尔逊积矩相关系数公式"><a href="#皮尔逊积矩相关系数公式" class="headerlink" title="皮尔逊积矩相关系数公式"></a>皮尔逊积矩相关系数公式</h4><p>$$ \rho_{X,Y}=\frac{cov(X,Y)}{\sigma_{x}\sigma_{y}}=\frac{E((X-\mu_x)(Y-\mu_y))}{\sigma_{x}\sigma_{y}}=\frac{E(XY)-E(X)E(Y)}{\sqrt{E(X^2)-E^2(X)}\sqrt{E(Y^2)-E^2(Y)}} $$</p><h3 id="余弦相似度-Cosine-Similarity"><a href="#余弦相似度-Cosine-Similarity" class="headerlink" title="余弦相似度(Cosine Similarity)"></a>余弦相似度(Cosine Similarity)</h3><p>利用多维空间两点与所设定的点形成夹角的余弦值范围为[-1,1]，值越大，说明夹角越大，两点相距就越远，相似度就越小。</p><h4 id="两向量间余弦定义"><a href="#两向量间余弦定义" class="headerlink" title="两向量间余弦定义"></a>两向量间余弦定义</h4><blockquote><p>多维空间两点与所设定的点形成夹角的余弦值</p></blockquote><h4 id="两向量间余弦计算公式"><a href="#两向量间余弦计算公式" class="headerlink" title="两向量间余弦计算公式"></a>两向量间余弦计算公式</h4><p>$$ sim_{X,Y}=\frac{XY}{||X||||Y||}=\frac{ \sum_{i=1}^n(x_iy_i)}{\sqrt{\sum_{i=1}^n(x_i)^2}*\sqrt{\sum_{i=1}^n(y_i)^2}} $$</p><p>公式中$ x_i $表示第i个用户对物品x的评分，$ y_i $同理。<br>该公式只考虑到了用户的评分，很可能评分较高的物品会排在前面而不管物品的其它信息，改进版的余弦相似度计算公式如下：</p><h4 id="改进的向余弦相似度计算公式"><a href="#改进的向余弦相似度计算公式" class="headerlink" title="改进的向余弦相似度计算公式"></a>改进的向余弦相似度计算公式</h4><p>$$ sim_{X,Y}=\frac{XYnum_{X\cap{Y}}}{||X||||Y||num_{X}log10(10+num_{Y})} $$</p><p>改进公式考虑到了两个向量相同个体个数、X向量大小、Y向量大小，注意：<br>$$ \ sim_{X,Y}\neq sim_{Y,X} $$</p><p><strong>注</strong>：本文并未使用改进般的余弦相似度计算公式</p><h3 id="Tanimoto-相似度-Jaccard-系数"><a href="#Tanimoto-相似度-Jaccard-系数" class="headerlink" title="Tanimoto 相似度(Jaccard 系数)"></a>Tanimoto 相似度(Jaccard 系数)</h3><p>Tanimoto相似度也称为Jaccard系数，是Cosine相似度扩展，多用于文档相似度就算。此相似度不考虑评价值，只考虑两个集合共同个体数量。</p><h4 id="Jaccard-系数公式"><a href="#Jaccard-系数公式" class="headerlink" title="Jaccard 系数公式"></a>Jaccard 系数公式</h4><p>$$ sim(x,y)=\frac{X\cap{Y}}{||X||+||Y||-||X\cap{Y}||} $$</p><h2 id="预测用户评分公式"><a href="#预测用户评分公式" class="headerlink" title="预测用户评分公式"></a>预测用户评分公式</h2><p>$$ pred_{u,p}=\frac{\sum_{i\in{ratedItems(u)}}{sim(i,p)r_{u,i}}}{\sum_{i\in{ratedItems(u)}}{sim(i,p)}} $$</p><p>公式中u指用户，p值物品，ratedItems(u)指用户u评价过的物品，sim指相似度（item之间的），r指用户对物品评分。</p><h2 id="构建ItemCFModel"><a href="#构建ItemCFModel" class="headerlink" title="构建ItemCFModel"></a>构建ItemCFModel</h2><h3 id="类定义"><a href="#类定义" class="headerlink" title="类定义"></a>类定义</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  物品信息</span></span><br><span class="line"><span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">Item</span>(<span class="params">itemId: <span class="type">Int</span>, itemName: <span class="type">String</span></span>)</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">//</span>  <span class="title">用户-物品-评分</span></span></span><br><span class="line"><span class="class"><span class="title">case</span> <span class="title">class</span> <span class="title">Rating</span>(<span class="params">userId: <span class="type">Int</span>, itemId: <span class="type">Int</span>, rating: <span class="type">Float</span></span>)</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">//</span>  <span class="title">用户信息</span></span></span><br><span class="line"><span class="class"><span class="title">case</span> <span class="title">class</span> <span class="title">User</span>(<span class="params">userId: <span class="type">Int</span>, userName: <span class="type">String</span></span>)</span></span><br></pre></td></tr></table></figure><h3 id="相似度度量"><a href="#相似度度量" class="headerlink" title="相似度度量"></a>相似度度量</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * SIMILARITY MEASURES</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">SimilarityMeasures</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * The Co-occurrence similarity between two vectors A, B is</span></span><br><span class="line"><span class="comment">    * |N(i) ∩ N(j)| / sqrt(|N(i)||N(j)|)</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">cooccurrence</span></span>(numOfRatersForAAndB: <span class="type">Long</span>, numOfRatersForA: <span class="type">Long</span>, numOfRatersForB: <span class="type">Long</span>): <span class="type">Double</span> = &#123;</span><br><span class="line">    numOfRatersForAAndB / math.sqrt(numOfRatersForA * numOfRatersForB)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * The correlation between two vectors A, B is</span></span><br><span class="line"><span class="comment">    * cov(A, B) / (stdDev(A) * stdDev(B))</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * This is equivalent to</span></span><br><span class="line"><span class="comment">    * [n * dotProduct(A, B) - sum(A) * sum(B)] /</span></span><br><span class="line"><span class="comment">    * sqrt&#123; [n * norm(A)^2 - sum(A)^2] [n * norm(B)^2 - sum(B)^2] &#125;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">correlation</span></span>(size: <span class="type">Double</span>, dotProduct: <span class="type">Double</span>, ratingSum: <span class="type">Double</span>,</span><br><span class="line">                  rating2Sum: <span class="type">Double</span>, ratingNormSq: <span class="type">Double</span>, rating2NormSq: <span class="type">Double</span>): <span class="type">Double</span> = &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> numerator = size * dotProduct - ratingSum * rating2Sum</span><br><span class="line">    <span class="keyword">val</span> denominator = scala.math.sqrt(size * ratingNormSq - ratingSum * ratingSum) *</span><br><span class="line">      scala.math.sqrt(size * rating2NormSq - rating2Sum * rating2Sum)</span><br><span class="line"></span><br><span class="line">    numerator / denominator</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Regularize correlation by adding virtual pseudocounts over a prior:</span></span><br><span class="line"><span class="comment">    * RegularizedCorrelation = w * ActualCorrelation + (1 - w) * PriorCorrelation</span></span><br><span class="line"><span class="comment">    * where w = # actualPairs / (# actualPairs + # virtualPairs).</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">regularizedCorrelation</span></span>(size: <span class="type">Double</span>, dotProduct: <span class="type">Double</span>, ratingSum: <span class="type">Double</span>,</span><br><span class="line">                             rating2Sum: <span class="type">Double</span>, ratingNormSq: <span class="type">Double</span>, rating2NormSq: <span class="type">Double</span>,</span><br><span class="line">                             virtualCount: <span class="type">Double</span>, priorCorrelation: <span class="type">Double</span>): <span class="type">Double</span> = &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> unregularizedCorrelation = correlation(size, dotProduct, ratingSum, rating2Sum, ratingNormSq, rating2NormSq)</span><br><span class="line">    <span class="keyword">val</span> w = size / (size + virtualCount)</span><br><span class="line"></span><br><span class="line">    w * unregularizedCorrelation + (<span class="number">1</span> - w) * priorCorrelation</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * The cosine similarity between two vectors A, B is</span></span><br><span class="line"><span class="comment">    * dotProduct(A, B) / (norm(A) * norm(B))</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">cosineSimilarity</span></span>(dotProduct: <span class="type">Double</span>, ratingNorm: <span class="type">Double</span>, rating2Norm: <span class="type">Double</span>): <span class="type">Double</span> = &#123;</span><br><span class="line">    dotProduct / (ratingNorm * rating2Norm)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * The Jaccard Similarity between two sets A, B is</span></span><br><span class="line"><span class="comment">    * |Intersection(A, B)| / |Union(A, B)|</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">jaccardSimilarity</span></span>(usersInCommon: <span class="type">Double</span>, totalUsers1: <span class="type">Double</span>, totalUsers2: <span class="type">Double</span>): <span class="type">Double</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> union = totalUsers1 + totalUsers2 - usersInCommon</span><br><span class="line">    usersInCommon / union</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="计算物品相似度"><a href="#计算物品相似度" class="headerlink" title="计算物品相似度"></a>计算物品相似度</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fit</span></span>(ratings: <span class="type">Dataset</span>[<span class="type">Rating</span>]): <span class="type">ItemCFModel</span> = &#123;</span><br><span class="line">    <span class="keyword">this</span>.ratings = <span class="type">Option</span>(ratings)</span><br><span class="line">    <span class="keyword">val</span> numRatersPerItem = ratings.groupBy(<span class="string">"itemId"</span>).count().alias(<span class="string">"nor"</span>)</span><br><span class="line">      .coalesce(defaultParallelism)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在原记录基础上加上item的打分者的数量</span></span><br><span class="line">    <span class="keyword">val</span> ratingsWithSize = ratings.join(numRatersPerItem, <span class="string">"itemId"</span>)</span><br><span class="line">      .coalesce(defaultParallelism)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//  执行内联操作</span></span><br><span class="line">    ratingsWithSize.join(ratingsWithSize, <span class="string">"userId"</span>)</span><br><span class="line">      .toDF(<span class="string">"userId"</span>, <span class="string">"item1"</span>, <span class="string">"rating1"</span>, <span class="string">"nor1"</span>, <span class="string">"item2"</span>, <span class="string">"rating2"</span>, <span class="string">"nor2"</span>)</span><br><span class="line">      .selectExpr(<span class="string">"userId"</span></span><br><span class="line">        , <span class="string">"item1"</span>, <span class="string">"rating1"</span>, <span class="string">"nor1"</span></span><br><span class="line">        , <span class="string">"item2"</span>, <span class="string">"rating2"</span>, <span class="string">"nor2"</span></span><br><span class="line">        , <span class="string">"rating1 * rating2 as product"</span></span><br><span class="line">        , <span class="string">"pow(rating1, 2) as rating1Pow"</span></span><br><span class="line">        , <span class="string">"pow(rating2, 2) as rating2Pow"</span>)</span><br><span class="line">      .coalesce(defaultParallelism)</span><br><span class="line">      .createOrReplaceTempView(<span class="string">"joined"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//  计算必要的中间数据，注意此处有WHERE限定，只计算了一半的数据量</span></span><br><span class="line">    <span class="keyword">val</span> sparseMatrix = spark.sql(</span><br><span class="line">      <span class="string">""</span><span class="string">"</span></span><br><span class="line"><span class="string">        |SELECT item1</span></span><br><span class="line"><span class="string">        |, item2</span></span><br><span class="line"><span class="string">        |, count(userId) as size</span></span><br><span class="line"><span class="string">        |, sum(product) as dotProduct</span></span><br><span class="line"><span class="string">        |, sum(rating1) as ratingSum1</span></span><br><span class="line"><span class="string">        |, sum(rating2) as ratingSum2</span></span><br><span class="line"><span class="string">        |, sum(rating1Pow)  as  ratingNorm1</span></span><br><span class="line"><span class="string">        |, sum(rating2Pow)  as  ratingNorm2</span></span><br><span class="line"><span class="string">        |, first(nor1)  as nor1</span></span><br><span class="line"><span class="string">        |, first(nor2)  as nor2</span></span><br><span class="line"><span class="string">        |FROM joined</span></span><br><span class="line"><span class="string">        |WHERE item1 &lt; item2</span></span><br><span class="line"><span class="string">        |GROUP BY item1, item2</span></span><br><span class="line"><span class="string">      "</span><span class="string">""</span>.stripMargin)</span><br><span class="line">      .coalesce(defaultParallelism)</span><br><span class="line">      .cache()</span><br><span class="line"></span><br><span class="line">    <span class="comment">//  计算物品相似度</span></span><br><span class="line">    <span class="keyword">var</span> sim = sparseMatrix.map(row =&gt; &#123;</span><br><span class="line">      <span class="keyword">val</span> size = row.getAs[<span class="type">Long</span>](<span class="number">2</span>)</span><br><span class="line">      <span class="keyword">val</span> dotProduct = row.getAs[<span class="type">Double</span>](<span class="number">3</span>)</span><br><span class="line">      <span class="keyword">val</span> ratingSum1 = row.getAs[<span class="type">Double</span>](<span class="number">4</span>)</span><br><span class="line">      <span class="keyword">val</span> ratingSum2 = row.getAs[<span class="type">Double</span>](<span class="number">5</span>)</span><br><span class="line">      <span class="keyword">val</span> ratingNorm1 = row.getAs[<span class="type">Double</span>](<span class="number">6</span>)</span><br><span class="line">      <span class="keyword">val</span> ratingNorm2 = row.getAs[<span class="type">Double</span>](<span class="number">7</span>)</span><br><span class="line">      <span class="keyword">val</span> numRaters1 = row.getAs[<span class="type">Long</span>](<span class="number">8</span>)</span><br><span class="line">      <span class="keyword">val</span> numRaters2 = row.getAs[<span class="type">Long</span>](<span class="number">9</span>)</span><br><span class="line"></span><br><span class="line">      <span class="keyword">val</span> cooc = cooccurrence(size, numRaters1, numRaters2)</span><br><span class="line">      <span class="keyword">val</span> corr = correlation(size, dotProduct, ratingSum1, ratingSum2, ratingNorm1, ratingNorm2)</span><br><span class="line">      <span class="keyword">val</span> regCorr = regularizedCorrelation(size, dotProduct, ratingSum1, ratingSum2,</span><br><span class="line">        ratingNorm1, ratingNorm2, <span class="type">PRIOR_COUNT</span>, <span class="type">PRIOR_CORRELATION</span>)</span><br><span class="line">      <span class="keyword">val</span> cosSim = cosineSimilarity(dotProduct, scala.math.sqrt(ratingNorm1), scala.math.sqrt(ratingNorm2))</span><br><span class="line">      <span class="keyword">val</span> jaccard = jaccardSimilarity(size, numRaters1, numRaters2)</span><br><span class="line">      (row.getInt(<span class="number">0</span>), row.getInt(<span class="number">1</span>), cooc, corr, regCorr, cosSim, jaccard)</span><br><span class="line">    &#125;).toDF(<span class="string">"itemId_01"</span>, <span class="string">"itemId_02"</span>, <span class="string">"cooc"</span>, <span class="string">"corr"</span>, <span class="string">"regCorr"</span>, <span class="string">"cosSim"</span>, <span class="string">"jaccard"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//  最终的物品相似度</span></span><br><span class="line">    sim.withColumnRenamed(<span class="string">"itemId_01"</span>, <span class="string">"itemId_02"</span>)</span><br><span class="line">      .withColumnRenamed(<span class="string">"itemId_02"</span>, <span class="string">"itemId_01"</span>)</span><br><span class="line">      .union(sim)</span><br><span class="line">      .repartition(defaultParallelism) <span class="comment">//  重新分区，以便数据均匀分布，方便下游用户使用</span></span><br><span class="line">      .cache()</span><br><span class="line">    similarities = <span class="type">Option</span>(sim)</span><br><span class="line">    <span class="keyword">this</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id="用户推荐"><a href="#用户推荐" class="headerlink" title="用户推荐"></a>用户推荐</h2><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 为指定的用户推荐num个物品</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * @param users 用户集</span></span><br><span class="line"><span class="comment">    * @param num   为每个用户推荐的物品数量</span></span><br><span class="line"><span class="comment">    * @return 推荐表</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">recommendForUsers</span></span>(users: <span class="type">Dataset</span>[<span class="type">User</span>], num: <span class="type">Int</span>): <span class="type">DataFrame</span> = &#123;</span><br><span class="line">    <span class="comment">//  similarityMeasure为相似度算法名</span></span><br><span class="line">    <span class="keyword">var</span> sim = similarities.get.select(<span class="string">"itemId_01"</span>, <span class="string">"itemId_02"</span>, similarityMeasure)</span><br><span class="line">    <span class="comment">//  获得评分表</span></span><br><span class="line">    <span class="keyword">val</span> rits = ratings.get</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> project: <span class="type">DataFrame</span> = users</span><br><span class="line">      .selectExpr(<span class="string">"userId as user"</span>, <span class="string">"userName"</span>)</span><br><span class="line">      <span class="comment">//  进行子投影，此处左表数量远小于右表，执行左连接</span></span><br><span class="line">      .join(rits, $<span class="string">"user"</span> &lt;=&gt; rits(<span class="string">"userId"</span>), <span class="string">"left"</span>)</span><br><span class="line">      .drop($<span class="string">"user"</span>)</span><br><span class="line">      <span class="comment">//  选择与用户相关的物品以及评分</span></span><br><span class="line">      .select(<span class="string">"userId"</span>, <span class="string">"itemId"</span>, <span class="string">"rating"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获得用户感兴趣的物品与其它物品的相似度</span></span><br><span class="line">    project.join(sim, $<span class="string">"itemId"</span> &lt;=&gt; sim(<span class="string">"itemId_01"</span>))</span><br><span class="line">      .selectExpr(<span class="string">"userId"</span></span><br><span class="line">        , <span class="string">"itemId_01 as relatedItem"</span></span><br><span class="line">        , <span class="string">"itemId_02 as otherItem"</span></span><br><span class="line">        , similarityMeasure</span><br><span class="line">        , <span class="string">s"<span class="subst">$similarityMeasure</span> * rating as simProduct"</span>)</span><br><span class="line">      .coalesce(defaultParallelism)</span><br><span class="line">      .createOrReplaceTempView(<span class="string">"tempTable"</span>)</span><br><span class="line"></span><br><span class="line">    spark.sql(</span><br><span class="line">      <span class="string">s""</span><span class="string">"</span></span><br><span class="line"><span class="string">         |SELECT userId</span></span><br><span class="line"><span class="string">         |,  otherItem</span></span><br><span class="line"><span class="string">         |,  sum(simProduct) / sum($similarityMeasure) as rating</span></span><br><span class="line"><span class="string">         |FROM tempTable</span></span><br><span class="line"><span class="string">         |GROUP BY userId, otherItem</span></span><br><span class="line"><span class="string">         |ORDER BY userId asc, rating desc</span></span><br><span class="line"><span class="string">      "</span><span class="string">""</span>.stripMargin)</span><br><span class="line">      <span class="comment">//  过滤结果</span></span><br><span class="line">      .rdd</span><br><span class="line">      .map(row =&gt; (row.getInt(<span class="number">0</span>), (row.getInt(<span class="number">1</span>), row.getDouble(<span class="number">2</span>))))</span><br><span class="line">      .groupByKey()</span><br><span class="line">      .mapValues(xs =&gt; &#123;</span><br><span class="line">        <span class="keyword">var</span> sequence = <span class="type">Seq</span>[(<span class="type">Int</span>, <span class="type">Double</span>)]()</span><br><span class="line">        <span class="keyword">val</span> iter = xs.iterator</span><br><span class="line">        <span class="keyword">var</span> count = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> (iter.hasNext &amp;&amp; count &lt; num) &#123;</span><br><span class="line">          <span class="keyword">val</span> rat = iter.next()</span><br><span class="line">          <span class="keyword">if</span> (rat._2 != <span class="type">Double</span>.<span class="type">NaN</span>)</span><br><span class="line">            sequence :+= (rat._1, rat._2)</span><br><span class="line">          count += <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">        sequence</span><br><span class="line">      &#125;)</span><br><span class="line">      .toDF(<span class="string">"userId"</span>, <span class="string">"recommended"</span>)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id="相似度计算结果展示"><a href="#相似度计算结果展示" class="headerlink" title="相似度计算结果展示"></a>相似度计算结果展示</h2><h3 id="数据来源"><a href="#数据来源" class="headerlink" title="数据来源"></a>数据来源</h3><p>数据来自<a href="https://grouplens.org/datasets/movielens/100k/" target="_blank" rel="noopener">MovieLens</a>，MovieLens数据集是一个关于电影评分的数据集，里面包含了从IMDB, The Movie DataBase上面得到的用户对电影的评分信息。</p><h3 id="计算出的物品间相似度"><a href="#计算出的物品间相似度" class="headerlink" title="计算出的物品间相似度"></a>计算出的物品间相似度</h3><p>以下展示了使用同现相似度和余弦相似度进行相似度计算后（其它相似度请自行测试）的电影间的相似度，并以《星球大战（1977）》进行测试的结果（只显示了前20个结果）。</p><p>令人惊讶的是余弦相似度的结果似乎不太令人满意，这似乎是因为余弦相似度只和用户评分有关（更适用于推荐5星电影，不关心电影的类型等），也可能是我的算法出现了差错，欢迎反馈。</p><h4 id="同现相似度结果展示"><a href="#同现相似度结果展示" class="headerlink" title="同现相似度结果展示"></a>同现相似度结果展示</h4><table><thead><tr><th>movie1</th><th>movie2</th><th>coocurrence</th></tr></thead><tbody><tr><td>星球大战（1977）</td><td>绝地归来（1983）</td><td>0.8828826458931883</td></tr><tr><td>星球大战（1977）</td><td>迷失方舟攻略（1981）</td><td>0.7679353753201742</td></tr><tr><td>星球大战（1977）</td><td>帝国反击，（1980）</td><td>0.7458505006229118</td></tr><tr><td>星球大战（1977）</td><td>教父，The（1972）</td><td>0.7275434127191666</td></tr><tr><td>星球大战（1977）</td><td>法戈（1996）</td><td>0.7239858668831711</td></tr><tr><td>星球大战（1977）</td><td>独立日（ID4）（1996）</td><td>0.723845113716724</td></tr><tr><td>星球大战（1977）</td><td>沉默的羔羊，The（1991）</td><td>0.7025515983155468</td></tr><tr><td>星球大战（1977）</td><td>印第安纳琼斯和最后的十字军东征（1989）</td><td>0.6920306174608959</td></tr><tr><td>星球大战（1977）</td><td>低俗小说（1994）</td><td>0.6885437675802282</td></tr><tr><td>星球大战（1977）</td><td>星际迷航：第一次接触（1996）</td><td>0.6850249237265413</td></tr><tr><td>星球大战（1977）</td><td>回到未来（1985）</td><td>0.6840536741086217</td></tr><tr><td>星球大战（1977）</td><td>逃亡者，The（1993）</td><td>0.6710463728397225</td></tr><tr><td>星球大战（1977）</td><td>摇滚，The（1996）</td><td>0.6646215466055597</td></tr><tr><td>星球大战（1977）</td><td>终结者，The（1984）</td><td>0.6636319257721421</td></tr><tr><td>星球大战（1977）</td><td>阿甘正传（1994）</td><td>0.6564951869930893</td></tr><tr><td>星球大战（1977）</td><td>终结者2：审判日（1991）</td><td>0.653467518885383</td></tr><tr><td>星球大战（1977）</td><td>Princess Bride，The（1987）</td><td>0.6534487891771482</td></tr><tr><td>星球大战（1977）</td><td>异形（1979）</td><td>0.648232034779792</td></tr><tr><td>星球大战（1977）</td><td>E.T。外星（1982）</td><td>0.6479990753086882</td></tr><tr><td>星球大战（1977）</td><td>巨蟒和圣杯（1974）</td><td>0.6476896799641126</td></tr></tbody></table><h4 id="余弦相似度结果展示"><a href="#余弦相似度结果展示" class="headerlink" title="余弦相似度结果展示"></a>余弦相似度结果展示</h4><p>余弦相似度</p><table><thead><tr><th>movie1</th><th>movie2</th><th>cosSim</th></tr></thead><tbody><tr><td>星球大战（1977）</td><td>Infinity（1996）</td><td>1.0</td></tr><tr><td>星球大战（1977）</td><td>Mostro，Il（1994）</td><td>1.0</td></tr><tr><td>星球大战（1977）</td><td>Boys，Les（1997）</td><td>1.0</td></tr><tr><td>星球大战（1977）</td><td>陌生人，（1994）</td><td>1.0</td></tr><tr><td>星球大战（1977）</td><td>爱是一切（1996）</td><td>1.0</td></tr><tr><td>星球大战（1977）</td><td>巴黎是女人（1995）</td><td>1.0</td></tr><tr><td>星球大战（1977）</td><td>遇难者，A（1937）</td><td>1.0</td></tr><tr><td>星球大战（1977）</td><td>馅饼在天空（1995）</td><td>1.0</td></tr><tr><td>星球大战（1977）</td><td>世纪（1993）</td><td>1.0</td></tr><tr><td>星球大战（1977）</td><td>天使在我的肩膀（1946）</td><td>1.0</td></tr><tr><td>星球大战（1977）</td><td>这里来曲奇（1935）</td><td>1.0</td></tr><tr><td>星球大战（1977）</td><td>力量98（1995）</td><td>1.0</td></tr><tr><td>星球大战（1977）</td><td>滑稽女郎（1943）</td><td>1.0</td></tr><tr><td>星球大战（1977）</td><td>火山（1996）</td><td>1.0</td></tr><tr><td>星球大战（1977）</td><td>难忘的夏天（1994）</td><td>1.0</td></tr><tr><td>星球大战（1977）</td><td>Innocents，The（1961）</td><td>1.0</td></tr><tr><td>星球大战（1977）</td><td>Sleepover（1995）</td><td>1.0</td></tr><tr><td>星球大战（1977）</td><td>木星的妻子（1994）</td><td>1.0</td></tr><tr><td>星球大战（1977）</td><td>我的生活与时代与安东宁·阿托（En compagnie d’Antonin Artaud）（1993）</td><td>1.0</td></tr><tr><td>星球大战（1977）</td><td>Bent（1997）</td><td>1.0</td></tr></tbody></table>]]></content>
      
      <categories>
          
          <category> 机器学习 </category>
          
          <category> spark </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spark </tag>
            
            <tag> ItemCF </tag>
            
            <tag> 协同过滤算法 </tag>
            
            <tag> 基于物品 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Ambari 2.6.x 本地仓库搭建和离线安装</title>
      <link href="/2018/04/01/blog-02/"/>
      <url>/2018/04/01/blog-02/</url>
      <content type="html"><![CDATA[<h1 id="Ambari-2-6-x-本地仓库搭建和离线安装"><a href="#Ambari-2-6-x-本地仓库搭建和离线安装" class="headerlink" title="Ambari 2.6.x 本地仓库搭建和离线安装"></a>Ambari 2.6.x 本地仓库搭建和离线安装</h1><p>ambari若从公网安装，速度缓慢而且成功几率为0（就我而言（捂脸））。所以最好的方式是创建离线仓库，加快安装速度，提高成功几率。本文以Ubuntu 16为列进行离线环境搭建。当然其它系统也ok，你可从<a href="https://docs.hortonworks.com/HDPDocuments/Ambari-2.6.1.5/bk_ambari-installation/content/ch_obtaining-public-repos.html" target="_blank" rel="noopener">公共仓库</a>选择兼容自己系统的包文件进行下载。</p><h2 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h2><p>你的集群中的所有主机都可通过ssh免密访问集群中的所有节点（包括自身）。若该步未完成，请参考<a href="https://www.jianshu.com/p/6048f305a920" target="_blank" rel="noopener">https://www.jianshu.com/p/6048f305a920</a>中的<strong>准备</strong>一节。</p><h2 id="创建本地仓库"><a href="#创建本地仓库" class="headerlink" title="创建本地仓库"></a>创建本地仓库</h2><h3 id="安装nginx服务器"><a href="#安装nginx服务器" class="headerlink" title="安装nginx服务器"></a>安装<code>nginx</code>服务器</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install nginx</span><br></pre></td></tr></table></figure><h3 id="创建目录作为仓库根目录"><a href="#创建目录作为仓库根目录" class="headerlink" title="创建目录作为仓库根目录"></a>创建目录作为仓库根目录</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir /var/www/ambari</span><br><span class="line">mkdir /var/www/ambari/HDP-UTILS</span><br><span class="line"><span class="built_in">cd</span> /var/www/ambari</span><br></pre></td></tr></table></figure><h3 id="下载安装包"><a href="#下载安装包" class="headerlink" title="下载安装包"></a>下载安装包</h3><ul><li>从<a href="https://docs.hortonworks.com/HDPDocuments/Ambari-2.6.1.5/bk_ambari-installation/content/ambari_repositories.html" target="_blank" rel="noopener">ambari仓库</a>和<a href="https://docs.hortonworks.com/HDPDocuments/Ambari-2.6.1.5/bk_ambari-installation/content/hdp_26_repositories.html" target="_blank" rel="noopener">HDP仓库</a>下载符合你的操作系统的ambari和HDP安装程序，这里下载的是Ubuntu 16的安装包</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">wget http://public-repo-1.hortonworks.com/ambari/ubuntu16/2.x/updates/2.6.1.5/ambari-2.6.1.5-ubuntu16.tar.gz</span><br><span class="line">wget http://public-repo-1.hortonworks.com/HDP/ubuntu14/2.x/updates/2.6.4.0/HDP-2.6.4.0-ubuntu14-deb.tar.gz</span><br><span class="line">wget http://public-repo-1.hortonworks.com/HDP-UTILS-1.1.0.22/repos/ubuntu14/HDP-UTILS-1.1.0.22-ubuntu14.tar.gz</span><br><span class="line">wget http://public-repo-1.hortonworks.com/HDP-GPL/ubuntu14/2.x/updates/2.6.4.0/HDP-GPL-2.6.4.0-ubuntu14-deb.tar.gz</span><br></pre></td></tr></table></figure><ul><li>解压上面下载的文件到指定目录</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf ambari-2.6.1.5-ubuntu16.tar.gz</span><br><span class="line">tar -zxvf HDP-GPL-2.6.4.0-ubuntu14-deb.tar.gz</span><br><span class="line">tar -zxvf HDP-2.6.4.0-ubuntu14-deb.tar.gz</span><br><span class="line">tar -zxvf HDP-UTILS-1.1.0.22-ubuntu14.tar.gz -C HDP-UTILS</span><br></pre></td></tr></table></figure><ul><li>可以看到当前目录(<code>/var/www/ambari</code>)下有如下文件夹：</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ambari HDP-GPL HDP HDP-UTILS</span><br></pre></td></tr></table></figure><h3 id="创建nginx配置文件ambari"><a href="#创建nginx配置文件ambari" class="headerlink" title="创建nginx配置文件ambari"></a>创建nginx配置文件<code>ambari</code></h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /etc/nginx/sites-available</span><br><span class="line">vi ambari</span><br></pre></td></tr></table></figure><ul><li>ambari 文件内容如下：</li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line"><span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line"><span class="attribute">listen</span> [::]:<span class="number">80</span>;</span><br><span class="line"></span><br><span class="line"><span class="attribute">server_name</span> &lt;host-ip&gt;; <span class="comment"># &lt;host-ip&gt;为服务器地址</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">root</span> /var/www/ambari;</span><br><span class="line"></span><br><span class="line"><span class="attribute">location</span><span class="regexp"> ^~</span> / &#123;</span><br><span class="line"><span class="attribute">autoindex</span> <span class="literal">on</span>;</span><br><span class="line"><span class="attribute">autoindex_exact_size</span> <span class="literal">off</span>;</span><br><span class="line"><span class="attribute">autoindex_localtime</span> <span class="literal">on</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attribute">location</span> <span class="regexp">~ /\.ht</span> &#123;</span><br><span class="line"><span class="attribute">deny</span> all;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>重启nginx服务器</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ../sites-enabled</span><br><span class="line">ln -s ../sites-available/ambari ambari</span><br><span class="line">service nginx restart</span><br></pre></td></tr></table></figure><ul><li>指定仓库地址</li></ul><p>进入到<code>/etc/apt/sources.list.d</code>文件夹下</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /etc/apt/sources.list.d</span><br></pre></td></tr></table></figure><ul><li>创建以下文件，<strong>记得把<code>&lt;host-name&gt;</code>替换为当前机器的ip</strong>：</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt;  cat ambari.list</span><br><span class="line"></span><br><span class="line"><span class="comment"># 因ambari每个大版本后都有小版本号，因此请自行检查路径是否正确</span></span><br><span class="line">deb http://&lt;host-name&gt;/ambari/ubuntu16/2.6.1.5/ Ambari main</span><br><span class="line"></span><br><span class="line">&gt;  cat ambari-hdp.list</span><br><span class="line"></span><br><span class="line"><span class="comment"># 因ambari每个大版本后都有小版本号，因此请自行检查路径是否正确</span></span><br><span class="line">deb http://&lt;host-name&gt;/HDP/ubuntu16/2.6.4.0-91/ HDP main</span><br><span class="line">deb http://&lt;host-name&gt;/HDP-GPL/ubuntu16/2.6.4.0-91/ HDP-GPL main</span><br><span class="line">deb http:/&lt;host-name&gt;/HDP-UTILS/repos/ubuntu16/ HDP-UTILS main</span><br></pre></td></tr></table></figure><p>将这两个文件拷贝到集群的所有机器上，现在本地仓库已经安装完成。</p><h2 id="安装ambari-server"><a href="#安装ambari-server" class="headerlink" title="安装ambari-server"></a>安装ambari-server</h2><p>执行完以上过程后，现在你可在集群中任何一台机器上安装ambari-server。安装教程请参考<a href="https://docs.hortonworks.com/HDPDocuments/Ambari-2.6.1.5/bk_ambari-installation/content/install-ambari-server-ubuntu16.html" target="_blank" rel="noopener">官方安装教程</a>。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install ambari-server</span><br></pre></td></tr></table></figure><p>按照安装流程，当出现选择仓库源的界面时，选择使用本地源。</p><p><img src="https://upload-images.jianshu.io/upload_images/8866637-ad80aedb5cd8b576.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/634" alt="选择HDP版本"></p><p>针对HDP, HDP-GPL, HDP-UTILS，它们的地址像这样填写，<strong>具体的主机ip和版本号依你的配置和下载的HDP版本而定，因此请检查你自己的链接是否可用</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">http://node2.hdp/HDP/ubuntu16/2.6.4.0-91/</span><br><span class="line">http://node2.hdp/HDP-GPL/ubuntu16/2.6.4.0-91/</span><br><span class="line">http://node2.hdp/HDP-UTILS-1.1.0.22/repos/ubuntu16/</span><br></pre></td></tr></table></figure><p>创建和使用本地仓库的过程已完成，接下来可继续按照官方教程进行安装。</p>]]></content>
      
      <categories>
          
          <category> hadoop学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ambari </tag>
            
            <tag> 离线安装 </tag>
            
            <tag> Ubuntu </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Ubuntu16.0.4 手动安装 CDH 5.14.0 （二）cloudera manager安装</title>
      <link href="/2017/09/07/blog-01/"/>
      <url>/2017/09/07/blog-01/</url>
      <content type="html"><![CDATA[<h1 id="Ubuntu16-0-4-手动安装-CDH-5-14-0-（二）cloudera-manager安装"><a href="#Ubuntu16-0-4-手动安装-CDH-5-14-0-（二）cloudera-manager安装" class="headerlink" title="Ubuntu16.0.4 手动安装 CDH 5.14.0 （二）cloudera manager安装"></a>Ubuntu16.0.4 手动安装 CDH 5.14.0 （二）cloudera manager安装</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>当前所使用的系统为Ubuntu 16.0.4，发行版本为 xenial</p><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><h3 id="下载部署相关软件"><a href="#下载部署相关软件" class="headerlink" title="下载部署相关软件"></a>下载部署相关软件</h3><h4 id="下载以下软件"><a href="#下载以下软件" class="headerlink" title="下载以下软件"></a>下载以下软件</h4><ul><li><a href="http://archive.cloudera.com/cm5/cm/5/" target="_blank" rel="noopener">Cloudera Manager安装包</a>，这里使用5.14.0版本。<ul><li>cloudera-manager-xenial-cm5.14.0_amd64.tar.gz</li></ul></li><li><p><a href="http://archive.cloudera.com/cdh5/parcels/latest/" target="_blank" rel="noopener">CDH离线资源包</a>(parcel用安装包)，只下载以下文件即可：</p><ul><li>CDH-5.14.0-1.cdh5.14.0.p0.24-xenial.parcel</li><li>CDH-5.14.0-1.cdh5.14.0.p0.24-xenial.parcel.sha1</li><li>manifest.json</li></ul></li><li><p><a href="http://central.maven.org/maven2/mysql/mysql-connector-java/5.1.45/mysql-connector-java-5.1.45.jar" target="_blank" rel="noopener">mysql jdbc连接库</a></p></li></ul><h4 id="部署软件"><a href="#部署软件" class="headerlink" title="部署软件"></a>部署软件</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mkdir /opt/cloudera-manager</span><br><span class="line">tar -xzvf cloudera-manager-xenial-cm5.14.0_amd64.tar.gz -C /opt/cloudera-manager</span><br><span class="line">mkdir -p /opt/cloudera/parcel-repo</span><br><span class="line">mv CDH-5.14.0-1.cdh5.14.0.p0.24-xenial.parcel.sha1 CDH-5.14.0-1.cdh5.14.0.p0.24-xenial.parcel.sha</span><br><span class="line">cp CDH-5.14.0-1.cdh5.14.0.p0.24-xenial.parcel CDH-5.14.0-1.cdh5.14.0.p0.24-xenial.parcel.sha manifest.json /opt/cloudera/parcel-repo</span><br></pre></td></tr></table></figure><p>最终的目录结构如下所示：</p><figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">/opt</span><br><span class="line">  |-/cloudera</span><br><span class="line">  |  |-/parcels</span><br><span class="line">  |  |-/parcel-repo</span><br><span class="line">  |  |  |-CDH<span class="number">-5.14</span><span class="number">.0</span><span class="number">-1.</span>cdh5<span class="number">.14</span><span class="number">.0</span>.p0<span class="number">.24</span>-xenial.parcel</span><br><span class="line">  |  |  |-CDH<span class="number">-5.14</span><span class="number">.0</span><span class="number">-1.</span>cdh5<span class="number">.14</span><span class="number">.0</span>.p0<span class="number">.24</span>-xenial.parcel.sha</span><br><span class="line">  |  |  |-manifest.json</span><br><span class="line">  |-/cloudera-manager</span><br><span class="line">  |  |-/cm5<span class="number">.14</span><span class="number">.0</span></span><br></pre></td></tr></table></figure><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="添加cloudera仓库"><a href="#添加cloudera仓库" class="headerlink" title="添加cloudera仓库"></a>添加cloudera仓库</h3><ul><li>Step 1：设置包列表</li></ul><p>从 <a href="https://www.cloudera.com/documentation/enterprise/latest/topics/cm_vd.html" target="_blank" rel="noopener">Cloudera Manager Version and Download Information </a><br>找到适合当前操作系统版本的cloudera包文件(这里是<br><code>https://archive.cloudera.com/cm5/ubuntu/xenial/amd64/cm/cloudera.list</code>)，<br>将文件中的内容复制到<code>/etc/apt/sources.list.d/cloudera-manager.list</code><br>没有则新建。</p><ul><li>Step 2：安装仓库密钥（可选）</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget https://archive.cloudera.com/cdh5/ubuntu/xenial/amd64/cdh/archive.key -O archive.key</span><br><span class="line">sudo apt-key add archive.key</span><br><span class="line">apt-get update</span><br></pre></td></tr></table></figure><h3 id="cloudera-manager-安装和配置"><a href="#cloudera-manager-安装和配置" class="headerlink" title="cloudera manager 安装和配置"></a>cloudera manager 安装和配置</h3><ul><li>Step 1：安装cloudera server和cloudera agent</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install cloudera-manager-daemons cloudera-manager-server</span><br><span class="line">sudo apt-get install cloudera-manager-agent</span><br></pre></td></tr></table></figure><ul><li>Step2：配置cloudera agent</li></ul><p>修改<code>/etc/cloudera-scm-agent/config.ini</code>文件的以下选项：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">server_host=master</span><br><span class="line">server_port=7182 #若改端口被占用，改为其它端口</span><br></pre></td></tr></table></figure><ul><li>Step3：添加mysql连接库</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp mysql-connector-java-5.1.45.jar /usr/share/cmf/lib</span><br></pre></td></tr></table></figure><ul><li>Step4：更改文件所有者</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chown cloudera-scm:cloudera-scm /opt/cloudera/parcels</span><br><span class="line">chown -R cloudera-scm:cloudera-scm /opt/cloudera/parcel-repo</span><br></pre></td></tr></table></figure><h3 id="cloudera-manager数据库账户设置"><a href="#cloudera-manager数据库账户设置" class="headerlink" title="cloudera manager数据库账户设置"></a>cloudera manager数据库账户设置</h3><p>此处假设我们的cloudera manager所使用的数据库为scm,用户名为scm，密码为scm。</p><ul><li>step 1：进入mysql命令界面</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -uroot -p</span><br></pre></td></tr></table></figure><ul><li>step 2：使能远程连接到scm账户</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">grant</span> all <span class="keyword">on</span> *.* <span class="keyword">to</span> <span class="string">'scm'</span>@<span class="string">'%'</span> <span class="keyword">identified</span> <span class="keyword">by</span> <span class="string">'scm'</span> <span class="keyword">with</span> <span class="keyword">grant</span> <span class="keyword">option</span>;</span><br><span class="line"><span class="keyword">flush</span> <span class="keyword">privileges</span>;</span><br></pre></td></tr></table></figure><ul><li>step 3: 配置数据库及用户</li></ul><p>若之前已尝试过安装，会有遗留的文件，删除：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm -f /etc/cloudera-scm-server/db.*</span><br></pre></td></tr></table></figure><p>使用以下命令创建和配置数据库及数据库用户</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/share/cmf/schema/scm_prepare_database.sh mysql -hmaster -uroot -proot --scm-host master scm scm scm</span><br></pre></td></tr></table></figure><p><strong>说明</strong>：该脚本用来创建和配置CMS需要的数据库。各参数是指：</p><ul><li><p>mysql：数据库用的是mysql，如果安装过程中用的oracle，那么该参数就应该改为oracle。</p></li><li><p>-uroot：root身份运行mysql。-proot：mysql的root密码是root。</p></li><li><p>–scm-host localhost ：CMS的主机，一般是和mysql安装的主机是在同一个主机上。</p></li><li><p>最后三个参数是：数据库名，数据库用户名，数据库密码。</p></li></ul><p><strong>注意</strong>：如果创建失败，根据报错日志，可能需删去数据库与用户，进行排错。相关命令如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> <span class="keyword">concat</span>(<span class="string">'User:'''</span>,<span class="keyword">user</span>,<span class="string">'''@'''</span>,host,<span class="string">''';'</span>)<span class="keyword">as</span> <span class="keyword">query</span> <span class="keyword">from</span> mysql.user; //查看用户</span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">database</span> scmdbn; //删除数据库</span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">User</span> <span class="string">'scmdbu'</span>@<span class="string">'master'</span>; //删除用户</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> hadoop学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ubuntu </tag>
            
            <tag> CDH </tag>
            
            <tag> cloudera manager </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
